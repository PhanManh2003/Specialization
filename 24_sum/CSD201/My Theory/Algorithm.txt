int binarySearch(const int array[], int size, int value)
{
    int i = 0, j = size - 1;
    int m; 
    int position = -1;
    bool found = false;
    while (i <= j && !found) 
    {
        m = (i + j) / 2;
        if (array[m] == value)
        {
            found = true;
            position = m;
        }
        else if (array[m] > value)
            j = m - 1;
        else
            i = m + 1;
    }
    return position;
	
	// Mảng cần phải được sắp xếp trước
}


void bubbleSort(int a[], int n)
{
    int temp;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (a[j] > a[j + 1])
            {
                temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
        }
    }
}

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        /* Move elements of arr[0..i-1], that are
        greater than key, to one position ahead
        of their current position to make room for key */

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
	
	// Chèn bản chất là thay đổi giá trị của một arr[index] chứ ko phải swap như bubbleSort
}


void selectionSort(int a[], int n)
{
    int temp;
    for (int i = 0; i < n; i++)
    {
        // Finding the minimum element in the remaining unsorted array
        int minIndex = i;
        for (int j = i + 1; j < n; j++)
        {
            if (a[j] < a[minIndex])
                minIndex = j;
        }
		
        // Swap the found minimum element with the first element
        temp = a[i];
        a[i] = a[minIndex];
        a[minIndex] = temp;
    }
}


// MERGE SORT
import java.util.Arrays;

public class MergeSort {
    public static void mergeSort(int[] arr) {
        if (arr.length > 1) {
            int mid = arr.length / 2;
            int[] left = Arrays.copyOfRange(arr, 0, mid);
            int[] right = Arrays.copyOfRange(arr, mid, arr.length);

            mergeSort(left);
            mergeSort(right);

            merge(arr, left, right);
        }
    }

    private static void merge(int[] arr, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;

        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        while (i < left.length) {
            arr[k++] = left[i++];
        }

        while (j < right.length) {
            arr[k++] = right[j++];
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 2, 9, 1, 7, 3, 8, 4, 6};
        mergeSort(arr);

        System.out.println("Sorted array: " + Arrays.toString(arr));
    }
}



